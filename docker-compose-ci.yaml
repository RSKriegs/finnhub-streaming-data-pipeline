version: "3.6"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    networks:
      - pipeline-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    hostname: kafka
    container_name: kafka
    networks:
      - pipeline-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:3.27.0
    container_name: kafdrop
    networks:
      - pipeline-network
    depends_on:
      - kafka
      - zookeeper
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  spark-k8s:
    build:
      context: ./StreamProcessor
      dockerfile: Dockerfile.k8s
    container_name: spark-k8s

  spark-master:
    build:
      context: ./StreamProcessor/spark
      dockerfile: Dockerfile.spark-master
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - SPARK_PUBLIC_DNS=localhost
    networks:
      - pipeline-network

  spark-worker-1:
    build:
      context: ./StreamProcessor/spark
      dockerfile: Dockerfile.spark-worker
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - SPARK_PUBLIC_DNS=localhost
    networks:
      - pipeline-network  
      
  spark-worker-2:
    build:
      context: ./StreamProcessor/spark
      dockerfile: Dockerfile.spark-worker
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - SPARK_PUBLIC_DNS=localhost
    networks:
      - pipeline-network

  cassandra:
    image: cassandra:3.11.3
    container_name: cassandra
    hostname: cassandra
    ports:
      - '9042:9042'
    networks:
      - pipeline-network
    volumes:
      - cassandra-db-volume:/var/lib/cassandra
    environment: &environment
      MAX_HEAP_SIZE: 256M
      HEAP_NEWSIZE: 128M
      CASSANDRA_USER: cassandra
      CASSANDRA_HOST: cassandra
      CASSANDRA_PASSWORD: cassandra
      CASSANDRA_CLUSTER_NAME: CassandraCluster
      CASSANDRA_NUM_TOKENS: 128
      CASSANDRA_DATACENTER: DataCenter1
      CASSANDRA_RACK: Rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e describe keyspaces"]
      interval: 15s
      timeout: 10s
      retries: 8

  finnhubproducer:
    build:
      context: ./FinnhubProducer
      dockerfile: Dockerfile
    container_name: FinnhubProducer
    environment:
      - KAFKA_TOPIC_NAME=market
      - KAFKA_SERVER=kafka
      - KAFKA_PORT=29092
    ports:
      - 8001:8001
    depends_on:
      - kafka
    networks:
      - pipeline-network

  streamprocessor:
    build:
      context: ./StreamProcessor
      dockerfile: Dockerfile
    container_name: StreamProcessor
    ports:
      - "8002:8002"
      - "4040:4040"
    environment:
      - SPARK_PUBLIC_DNS=localhost
    depends_on:
      - spark-master
      - spark-worker-1
      - spark-worker-2
      - cassandra
    networks:
      - pipeline-network
  
  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    depends_on:
      - cassandra
    environment:
      - GF_INSTALL_PLUGINS=hadesarchitect-cassandra-datasource
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/dashboard.json
      - GF_AUTH_ANONYMOUS_ENABLED=true
    networks:
      - pipeline-network
    
networks:
  pipeline-network:
    driver: bridge
volumes:
  cassandra-db-volume:
  grafana-data:
